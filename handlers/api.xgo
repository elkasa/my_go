package handlers

import (
	"fmt"
	"log"
	"net/http"
	"regexp"
	"strconv"
	"time"
)

type MyHandler struct {
	l *log.Logger
}

func NewHandler(l *log.Logger) *MyHandler {
	return &MyHandler{l}

}

// Parse the product id from the URI
func getID(r *http.Request) (int, error) {
	re := regexp.MustCompile(`^\/idfs\/([0-9]+)$`)
	m := re.FindAllStringSubmatch(r.URL.Path, -1)

	// We should have one match which contains two groups
	// anything else is an invalid URI
	if len(m) != 1 || len(m[0]) != 2 {
		return -1, fmt.Errorf("Invalid Path, path should be /idfss/[id]")
	}
	// Convert the id into an integer and return
	// the regex ensures that the second group is an integer
	fmt.Printf("%v", m)
	return strconv.Atoi(m[0][1])
}

func (h *MyHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	switch r.Method {
	case http.MethodGet:
		id, _ := getID(r)
		if id > 0 {
			fmt.Fprintf(w, "GET idfs"+r.URL.Path+"id :"+strconv.Itoa(id))
			// h.getIdfs(w, r)
			// return
		}
		// fmt.Fprintf(w, "getParts"+r.URL.Path)
		// return
	case http.MethodPost:
		w.WriteHeader(http.StatusMethodNotAllowed)
		w.Write([]byte("method not allowed"))
		return
	default:
		h.healthCheck(w, r)
		w.WriteHeader(http.StatusMethodNotAllowed)
		w.Write([]byte("method not allowed"))
		return
	}

}

func (h *MyHandler) getIdfs(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "getIdfs"+r.URL.Path)
}

// func (l *MyHandler) getIDFByID(w http.ResponseWriter, r *http.Request) {
// 	fmt.Println("var")
// 	fmt.Fprintf(w, "getIdfById"+r.URL.Path)
// }

// func (l *MyHandler) getParts(w http.ResponseWriter, r *http.Request) {
// 	fmt.Fprintf(w, "getParts"+r.URL.Path)
// }

// func (l *MyHandler) getPartByID(w http.ResponseWriter, r *http.Request) {
// 	fmt.Fprintf(w, "getPartById"+r.URL.Path)
// }

func (l *MyHandler) healthCheck(w http.ResponseWriter, r *http.Request) {
	currentTime := time.Now()
	fmt.Fprintf(w, "healthStatus : "+currentTime.String()+strconv.FormatInt(currentTime.Unix(), 10))
}
